# -*- coding: utf-8 -*-
"""face_makeup.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WiW2tlRsb0wy757uTZQp4Uak8la3yZRF
"""

pip install face-recognition

import face_recognition
import cv2
import numpy as np
import argparse
import os

# Parse command line arguments
parser = argparse.ArgumentParser(description='Apply makeup to faces in an image')
parser.add_argument('-i', '--input', type=str, required=True,
                    help='Path to input image file')
parser.add_argument('-o', '--output', type=str, required=True,
                    help='Path to output image file')
parser.add_argument('--type', type=int, default=1,
                    help='Type of makeup to apply (1-3)')
args = parser.parse_args()

# Load the input image
if args.type==1:
  image = face_recognition.load_image_file(args.input)

# Detect facial landmarks using face_recognition library
  face_landmarks_list = face_recognition.face_landmarks(image)

# Create a copy of the input image
  image_with_lines = np.copy(image)

# Draw facial landmark lines on the copy of the input image
  for face_landmarks in face_landmarks_list:
    for facial_feature in face_landmarks.keys():
        points = face_landmarks[facial_feature]
        for i in range(len(points) - 1):
            pt1 = points[i]
            pt2 = points[i + 1]
            cv2.line(image_with_lines, pt1, pt2, (0, 0, 255), 1)

# Convert the output image to RGB format
  image_with_lines = cv2.cvtColor(image_with_lines, cv2.COLOR_BGR2RGB)

# Save the facial landmark lines image
  cv2.imwrite(args.output, image_with_lines)

import face_recognition
import cv2
import numpy as np
import argparse
import os

# Parse command line arguments
parser = argparse.ArgumentParser(description='Apply makeup to faces in an image')
parser.add_argument('-i', '--input', type=str, required=True,
                    help='Path to input image file')
parser.add_argument('-o', '--output', type=str, required=True,
                    help='Path to output image file')
parser.add_argument('--type', type=int, default=1,
                    help='Type of makeup to apply (1-3)')
args = parser.parse_args()

if args.type==2:
  image = face_recognition.load_image_file(args.input)

# Detect facial landmarks using face_recognition library
  face_landmarks_list = face_recognition.face_landmarks(image)

# Apply makeup to the facial landmarks
  for face_landmarks in face_landmarks_list:
    # Define the colors for the makeup
    lipstick_color = (147, 20, 255)
    lipstick_thickness= 2
    eyeshadow_color = (36, 28, 0)
    eyeshadow_thickness=1
    #eyebrow_color = (36, 28, 0)
    #eyebrow_thickness=1

    #apply eyebrow color 
    #left_eyebrow_points = face_landmarks['left_eyebrow'] 
    #cv2.fillPoly(image, [np.array(left_eyebrow_points)], eyebrow_color)
    #cv2.polylines(image, [np.array(left_eyebrow_points)], True, eyebrow_color, thickness=eyebrow_thickness)

    #right_eyebrow_points = face_landmarks['right_eyebrow'] 
    #cv2.fillPoly(image, [np.array(right_eyebrow_points)], eyebrow_color)
    #cv2.polylines(image, [np.array(right_eyebrow_points)], True, eyebrow_color, thickness=eyebrow_thickness)
    
    # Apply lipstick to the lips
    top_lip_points = face_landmarks['top_lip'] 
    #cv2.fillPoly(image, [np.array(lip_points)], lipstick_color)
    cv2.polylines(image, [np.array(top_lip_points)], True, lipstick_color, thickness=lipstick_thickness)

    bottom_lip_points = face_landmarks['bottom_lip'] 
    #cv2.fillPoly(image, [np.array(lip_points)], lipstick_color)
    cv2.polylines(image, [np.array(bottom_lip_points)], True, lipstick_color, thickness=lipstick_thickness)
    
    # Apply eyeshadow to the eyelids
    left_eye_points = face_landmarks['left_eye'] 
    #cv2.fillPoly(image, [np.array(eye_points)], eyeshadow_color)
    cv2.polylines(image, [np.array(left_eye_points)], True, eyeshadow_color, thickness=eyeshadow_thickness)

    right_eye_points = face_landmarks['right_eye'] 
    #cv2.fillPoly(image, [np.array(eye_points)], eyeshadow_color)
    cv2.polylines(image, [np.array(right_eye_points)], True, eyeshadow_color, thickness=eyeshadow_thickness)

  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Save the output image with makeup for task 3
  cv2.imwrite(args.output, image)